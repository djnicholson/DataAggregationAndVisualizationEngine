// <copyright file="AverageBySecondDataPointAggregator.cs" company="David Nicholson">
//     Copyright (c) David Nicholson. All rights reserved.
// </copyright>

namespace DAaVE.Library.DataAggregation.Aggregators
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Generates aggregate data points spaced at exact 1-second intervals. Each point is generated by taking the average
    /// (mean) of all actual data points collected in the following second.
    /// </summary>
    public sealed class AverageBySecondDataPointAggregator : IDataPointAggregator
    {
        private static DateTime TruncateToSecondsUtc(DateTime input)
        {
            return new DateTime(input.Year, input.Month, input.Day, input.Hour, input.Minute, input.Second, DateTimeKind.Utc);
        }

        /// <inheritdoc />
        public IEnumerable<AggregatedDataPoint> Aggregate(IEnumerable<DataPoint> continuousDataSegment)
        {
            DataPoint[] remainingPoints = continuousDataSegment.ToArray();

            while (remainingPoints.Count() != 0)
            {
                DateTime aggregateUtcTime = TruncateToSecondsUtc(remainingPoints.First().UtcTimestamp);

                Func<DataPoint, bool> inAggregationWindow =
                    p => TruncateToSecondsUtc(p.UtcTimestamp).Ticks == aggregateUtcTime.Ticks;

                IEnumerable<DataPoint> pointsUnderConsideration = remainingPoints.Where(inAggregationWindow);
                remainingPoints = remainingPoints.Where(p => !inAggregationWindow(p)).ToArray();

                yield return new AggregatedDataPoint()
                {
                    UtcTimestamp = aggregateUtcTime,
                    AggregatedValue = pointsUnderConsideration.Average(p => p.Value),
                };
            }

            yield break;
        }
    }
}
